setwd('Documents/Computer/jamovi/processR/')
install.packages("lavaan", repos = "http://www.da.ugent.be", type = "source")
install.packages("lavaan", repos = "http://www.da.ugent.be", type = "source", lib = './build/R')
jmvtools::install()
jmvtools::install(home='/app/bin/')
jmvtools::install(home='/app/bin/')
install.packages("/home/sjentsch/Downloads/bda_13.4.13.tar.gz", type = "source", lib = './build/R')
install.packages("lavaan", repos = "http://www.da.ugent.be", type = "source", lib = './build/R')
jmvtools::install(home='/app/bin/')
jmvtools::install(home='/app/bin/')
install.packages('BH')
getwd()
quit()
drawModel(fit,labels=labels,nodelabels=nodelabels,whatLabel="name",
xlim=c(-0.4,1.3),ylim=c(-0.1,1.1),
arrow.pos=list(a2=0.45,a3=0.4,a4=0.4,a5=0.3))
labels=list(X="frame",Y="donate")
library(processR)
drawModel(labels=labels)
drawModel(labels=labels,arrowslabels=list(c="c"),whatLabel="label")
library(processR)
labels=list(X="frame",Y="donate")
drawModel(labels=labels)
library(processR)
drawModel(labels=labels,arrowslabels=list(c="c"))
drawModel(labels=labels)
drawModel(labels=labels,arrowslabels=list(c="c"))
labels=list(X="X",M=c("M1","M2"),Y="Y")
drawModel(labels=labels,serial=TRUE,nodemode=4)
library(processR)
labels=list(X="X",M=c("M1","M2"),Y="Y")
drawModel(labels=labels,serial=TRUE,nodemode=4)
labels=list(X="X",M=c("M1","M2","M3"),Y="Y")
drawModel(labels=labels,serial=TRUE)
labels=list(X="X",M=c("M1","M2"),Y="Y")
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
drawModel(labels=labels,parallel=TRUE)
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
drawModel(labels=labels,parallel=TRUE)
drawModel(labels=labels,parallel=TRUE,serial=TRUE)
drawModel(labels=labels,parallel=TRUE)
drawModel(labels=labels,parallel=TRUE,serial=TRUE)
drawModel(labels=labels,parallel=TRUE)
drawModel(labels=labels,parallel=TRUE,serial=TRUE)
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model=multipleMediation(labels=labels,data=pmi,serial=TRUE)
cat(model)
semfit=sem(model=model,data=pmi)
require(lavaan)
semfit=sem(model=model,data=pmi)
drawModel(semfit,labels=labels,parallel=TRUE)
drawModel(semfit,labels=labels,whatLabel="est",parallel=TRUE)
model=multipleMediation(labels=labels,data=pmi,serial=TRUE)
cat(model)
nodelabels=NULL;whatLabel="name";semfit=NULL;parallel=TRUE;covar=NULL;data=NULL
equation=NULL
labels=list(X="cond",M=c("import","pmi","age","M4"),Y="reaction")
xmargin=0.01;radx=NULL;mode=2;nodemode=1
ymargin=0.02;xlim=NULL;ylim=NULL
rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;xspace=NULL;arrow.pos=list()
digits=3;serial=FALSE
labels=list(X="X",M=c("M1","M2"),Y="Y");parallel=TRUE;serial=TRUE
if(is.null(radx)) radx=ifelse(nodemode %in% c(1,4),0.08,0.12)
labels=appendLabels(labels,vars,moderator,covar)
system("grep -r 'appendLabels' *")
#'add name to labels
#'@param labels A list
#'@param id label id
#'@param name A character
#'@export
#'@examples
#'labels=c(X="X",M="M",Y="Y")
#'addLabels(labels,"W","X")
#'addLabels(labels,"W","W")
addLabels=function(labels,id,name){
if(!(name %in% unlist(labels))){
labels[[id]]=name
}
labels
}
#' Append labels from vars, moderator and covar
#' @param labels A list
#' @param vars A list
#' @param moderator  A list
#' @param covar A list
appendLabels=function(labels,vars=list(),moderator=list(),covar=NULL){
if(length(vars)>0){
if(is.null(vars$label)){
if(length(vars$name)==1){
labels=addLabels(labels,"W",vars$name[[1]][1])
labels=addLabels(labels,"Z",vars$name[[1]][2])
} else{
for(i in seq_along(vars$name)){
labels=addLabels(labels,paste0("W",i),vars$name[[i]][1])
labels=addLabels(labels,paste0("Z",i),vars$name[[i]][2])
}
}
} else{
if(length(vars$name)==1){
labels=addLabels(labels,vars$label[[1]][1],vars$name[[1]][1])
labels=addLabels(labels,vars$label[[1]][2],vars$name[[1]][2])
} else{
for(i in seq_along(vars$name)){
labels=addLabels(labels,vars$label[[i]][1],vars$name[[i]][1])
labels=addLabels(labels,vars$label[[i]][2],vars$name[[i]][2])
}
}
}
}
if(length(moderator)>0){
# prefix=ifelse(length(vars)==0,"W","V")
# if(length(moderator$name)==1){
#   labels=addLabels(labels,prefix,moderator$name)
# } else{
# for(i in seq_along(moderator$name)){
#   labels=addLabels(labels,paste0(prefix,i),moderator$name[i])
# }
# }
if(is.null(moderator$label)){
prefix=ifelse(length(vars)==0,"W","V")
if(length(moderator$name)==1){
labels=addLabels(labels,prefix,moderator$name)
} else{
for(i in 1:length(moderator$name)){
labels=addLabels(labels,paste0(prefix,i),moderator$name[i])
}
}
} else{
for(i in 1:length(moderator$label)){
labels=addLabels(labels,moderator$label[i],moderator$name[i])
}
}
}
if(!is.null(covar)){
for(i in seq_along(covar$name)){
labels=addLabels(labels,paste0("C",i),covar$name[i])
}
}
labels
}
#' labels2table(labels,serial=FALSE)
#' labels2table(labels,covar=covar)
#' labels2table(labels,moderator=moderator)
#' labels=list(X="X",M="M",Y="Y")
#' moderator=list(name=c("W"),site=list(c("b","c")))
#' labels2table(labels,moderator=moderator)
#' labels=list(X="baby",M="wine",Y="tile")
#' moderator=list(name=c("milk"),site=list("a"))
#' covar=list(name=c("milk","tent","sand"),site=list(c("Y"),c("M","Y"),c("M","Y")))
#' labels2table(labels,moderator=moderator,covar=covar,serial=FALSE)
labels2table=function(labels=labels,vars=list(),moderator=list(),covar=NULL,serial=TRUE,
bmatrix=NULL,
eq=NULL){
# vars=list();eq=NULL;covar=NULL;serial=TRUE;bmatrix=NULL
# labels=list(X="X",M="M",Y="Y")
# moderator=list(name="X",site=list(c("b")))
# labels=list(X="baby",M=c("wine","tent","sand"),Y="tile")
# bmatrix=c(1,1,0,1,0,0,1,1,1,1)
# moderator=list(name=c("milk","hair"),labels=c("W","Z"),
#                matrix=list(c(1,0,0,0,0,0,0,0,0,0),c(0,0,0,0,0,0,0,1,0,0)))
# labels=list(X="baby",M="wine",Y="tile")
# vars=list()
# moderator=list(name=c("milk"),site=list("a"))
# covar=list(name=c("milk","tent","sand"),site=list(c("Y"),c("M","Y"),c("M","Y")))
# serial=FALSE
# bmatrix=NULL
# eq=NULL
if(is.null(eq)) {
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
}
eq
eq=checkEquationVars(eq)
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
}
labels=appendLabels(labels,vars,moderator,covar)
# nodelabels=NULL;whatLabel="name";semfit=NULL;parallel=TRUE;covar=NULL;data=NULL
# equation=NULL
# labels=list(X="cond",M=c("import","pmi","age","M4"),Y="reaction")
# xmargin=0.01;radx=NULL;mode=2;nodemode=1
# ymargin=0.02;xlim=NULL;ylim=NULL
# rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
# xinterval=NULL;yinterval=NULL;xspace=NULL;arrow.pos=list()
# digits=3;serial=FALSE
labels=list(X="X",M=c("M1","M2"),Y="Y");parallel=TRUE;serial=TRUE;vars=list();moderator=list();covar=NULL
labels=appendLabels(labels,vars,moderator,covar)
labels
df1=labels2table(labels=labels,vars=vars,moderator=moderator,
covar=covar,serial=serial,bmatrix=bmatrix,
eq=equation)
# nodelabels=NULL;whatLabel="name";semfit=NULL;parallel=TRUE;covar=NULL;data=NULL
# equation=NULL
# labels=list(X="cond",M=c("import","pmi","age","M4"),Y="reaction")
# xmargin=0.01;radx=NULL;mode=2;nodemode=1
# ymargin=0.02;xlim=NULL;ylim=NULL
# rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
# xinterval=NULL;yinterval=NULL;xspace=NULL;arrow.pos=list()
# digits=3;serial=FALSE
# labels=list(X="X",M=c("M1","M2"),Y="Y");parallel=TRUE;serial=TRUE;
vars=list();moderator=list();covar=NULL;bmatrix=NULL
df1=labels2table(labels=labels,vars=vars,moderator=moderator,
covar=covar,serial=serial,bmatrix=bmatrix,
eq=equation)
df1$end=df1$Variables
df1$start=df1$Predictors
print(df1)
labels=list(X="X",M=c("M1","M2"),Y="Y")
moderator=list();serial=FALSE;eq=NULL
labels2table(labels)
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
eq
eq=checkEquationVars(eq)
eq
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
eq
eq=checkEquationVars(eq)
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
serial=TRUE
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
eq
eq=checkEquationVars(eq)
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
eq
labels
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
eq="wine~baby+milk+baby:milk"
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
eq2var(eq,labels=labels)
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq="Y~M1+M2+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="Y~M1+M2+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq=str_replace_all(eq," ","")
temp=unlist(strsplit(eq,"~"))
y=temp[1]
require(strinfr)
require(stringr)
eq=str_replace_all(eq," ","")
temp=unlist(strsplit(eq,"~"))
y=temp[1]
x=unique(unlist(strsplit(temp[2],"\\+")))
y=rep(y,length(x))
df=data.frame(y=y,x=x,stringsAsFactors = FALSE)
df
df$Variables=changeLabelName(df$y,labels=labels)
df$Predictors=changeLabelName(df$x,labels=labels)
df
prefix=ifelse(df$Variables[1]=="Y","b","a")
y[1]
prefix
df$x
df
df$name=makeCoefLabel(name=df$x,dep=y[1],labels=labels,constant = "iy",prefix=prefix)
df$name=str_replace(df$name,"'","")
df
eq="Y~M1+M2+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M3~X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
library(processR)
labels=list(X="X",M=c("M1","M2"),Y="Y")
drawModel(labels=labels,serial=TRUE,nodemode=4)
labels=list(X="X",M=c("M1","M2","M3"),Y="Y")
drawModel(labels=labels,serial=TRUE)
equation='M1~X
M2~X+M1
M3~X+M1
Y~X+M1+M2+M3'
node.pos=list(X=c(0,0.5),M1=c(0.5,0.5),M2=c(0.75,0.9),M3=c(0.75,0.1),Y=c(1,0.5))
curved.arrow=list(a2=-0.1,a3=0.1,c=-0.15)
drawModel(equation=equation,nodemode=2,node.pos=node.pos,curved.arrow=curved.arrow)
equation='M1~X
M2~X
M3~X
M4~X+M1+M2+M3
Y~X+M1+M2+M3+M4'
node.pos=list(X=c(0,0.5),M1=c(0.35,0.9),M2=c(0.35,0.5),M3=c(0.35,0.1),M4=c(0.7,0.5),Y=c(1,0.5))
curved.arrow=list(a4=0.15,b2=0.15)
segment.arrow=list(c=0.5)
drawModel(equation=equation,nodemode=2,node.pos=node.pos,radx=0.08,curved.arrow=curved.arrow,
segment.arrow=segment.arrow)
library(processR)
library(processR)
fit=lm(govact~negemot*age,data=glbwarm)
compareMC(fit)
compareMC(fit,mode=2)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
library(processR)
devtools::document()
devtools::document()
devtools::check()
library(processR)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
fit=lm(govact~negemot*age,data=glbwarm)
res=compareMC(fit)
ft<-modelsSummary2Table(res,vanilla=vanilla)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
fit=lm(govact~negemot*age,data=glbwarm)
compareMC(fit)
compareMC(fit,mode=2)
fit=lm(govact~negemot*age,data=glbwarm)
compareMC(fit)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
devtools::document()
devtools::check()
citation("processR")
library(processR)
library(processR)
library(processR)
labels=list(X="estress",M="affect",Y="withdraw")
vars=list(name=list(c("tenure","age")),site=list(c("a","b")))
moderator=list(name=c("age","sex"),site=list(c("c"),c("b","c")),pos=c(1,2),
arr.pos=list(c(0.3),c(0.3,0.7)))
drawConcept(labels=labels,drawbox=TRUE)
drawConcept(labels=labels,drawbox=TRUE,box.col="yellow")
drawConcept(labels=labels,drawbox=TRUE,box.col=c("yellow","green","blue"))
drawConcept(labels=labels,drawbox=TRUE)
ztable::palette2colors
devtools::document()
library(processR)
labels=list(X="estress",M="affect",Y="withdraw")
vars=list(name=list(c("tenure","age")),site=list(c("a","b")))
moderator=list(name=c("age","sex"),site=list(c("c"),c("b","c")),pos=c(1,2),
arr.pos=list(c(0.3),c(0.3,0.7)))
drawConcept(labels=labels,drawbox=TRUE)
drawConcept(labels=labels,pallete="Reds")
drawConcept(labels=labels,palette="Reds")
drawConcept(labels=labels,palette="Blues")
display.brewer.all()
RColorBrewer::display.brewer.all()
drawConcept(labels=labels,palette="set3")
drawConcept(labels=labels,palette="Set3")
drawConcept(labels=labels)
labels=list(X="X",M=c("M1","M2"),Y="Y")
vars=list(name=list(c("W","Z")),matrix=list(c(0,0,1,0,0,0)),pos=6)
bmatrix=c(1,1,1,1,1,1)
drawConcept(labels=labels,bmatrix=bmatrix,vars=vars)
drawConcept(labels=labels,bmatrix=bmatrix,vars=vars,palette="Set3")
devtools::document()
equation='M1~X
M2~X
M3~X
M4~X+M1+M2+M3
Y~X+M1+M2+M3+M4'
node.pos=list(X=c(0,0.5),M1=c(0.35,0.9),M2=c(0.35,0.5),M3=c(0.35,0.1),M4=c(0.7,0.5),Y=c(1,0.5))
curved.arrow=list(a4=0.15,b2=0.15)
segment.arrow=list(c=0.5)
drawModel(equation=equation,nodemode=2,node.pos=node.pos,radx=0.08,curved.arrow=curved.arrow,
segment.arrow=segment.arrow)
library(processR)
labels=list(X="baby",M="wine",Y="tile")
moderator=list(name=c("milk"),site=list("a"))
covar=list(name=c("milk","tent","sand"),site=list(c("Y"),c("M","Y"),c("M","Y")))
drawModel(labels=labels,moderator=moderator,covar=covar)
drawModel(labels=labels,moderator=moderator,covar=covar,box.col="green")
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Set3")
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Reds")
library(processR)
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Reds")
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Set3")
devtools::document()
devtools::check()
devtools::check_win-develp()
devtools::check_win_develp()
devtools::check_win_devel()
devtools::check_rhub()
library(processR)
system("grep -r crossing *")
library(processR)
system("grep -r 'jtools' *")
system("grep -r 'jtools' *")
install.packages("lavaan")
install.packages("diagram")
install.packages("ggrepel")
install.packages("semTools")
install.packages("TH.data")
install.packages("shinyWidgets")
install.packages("predict3d")
install.packages("interactions")
install.packages("car")
library(processR)
devtools::document()
devtools::document()
devtools::check()
devtools::check_win_devel()
install.packages(c("boot", "callr", "farver", "foreign", "gh", "janitor", "MASS", "nlme", "prettyunits", "rlang", "rmarkdown", "sjlabelled", "tidyr", "vctrs"))
install.packages(c("boot", "callr", "farver", "foreign", "gh", "janitor", "MASS", "nlme", "prettyunits", "rlang", "rmarkdown", "sjlabelled", "tidyr", "vctrs"))
install.packages(c("rlang", "tidyr", "vctrs"))
install.packages(c("rlang", "tidyr", "vctrs"))
system("grep -r 'makeIndirectEquation' *")
system("grep -r 'cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))' *")
system("grep -r 'makeIndirectEquation' *")
X="negemot";M="ideology"
temp1=c("a1*negemot","a2*sex","a4*negemot*sex","a5*negemot*age","a6*sex*age")
temp2="b1*ideology"
temp3="c1*negemot"
moderatorNames=c("age","sex")
X= "hp";M= "am"
temp1= c("a1*hp","a2*wt","a3*hp:wt")
temp2= "b1*am"
temp3= c("c1*hp","c2*wt","c3*hp:wt")
moderatorNames=c("wt")
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
library(processR)
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
moderatorNames=c("wt")
str_detect(X,":")
require(stringr)
str_detect(X,":")
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
str_detect_all(X,":")
X
strGrouping(temp1,X)
X= "hp";M= "am"
temp1= c("a1*hp","a2*wt","a3*hp:wt")
temp2= "b1*am"
temp3= c("c1*hp","c2*wt","c3*hp:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames,range=TRUE))
X="wt";M=NULL;temp1=NULL;temp2=NULL;temp3=c("c1*wt","c2*hp","c3*wt:hp");
moderatorNames="hp";range=TRUE;rangemode=1;probs=c(0.16,0.5,0.84)
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames,range=TRUE))
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check_rhub()
devtools::check()
devtools::release()
devtools::release()
devtools::document()
devtools::check()
devtools::check_rhub()
car::vif
tidyr::crossing
system("grep -r 'ggCor' *")
system("grep -r 'mycor' *")
mycor::mycor
system("grep -r 'powerpoint_presentation' *")
system("grep -r 'render' *")
system("grep -r 'medsummary' *")
system("grep -r 'medSummary' *")
system("grep -r 'jnPlot' *")
fit=lm(mpg~hp*wt,data=mtcars)
jnPlot(fit)
library(processR)
fit=lm(mpg~hp*wt,data=mtcars)
jnPlot(fit)
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_rhub()
system("grep -r 'vif' *")
hlabel=as.list(hlabel)
hlabel
ft<-ft %>% set_header_labels(values=hlabel)
colcount=5+ifelse(vanilla,1,0)
ft
for(i in 1:count){
ft<- ft %>% merge_h_range(i=(rowcount-4):rowcount,
j1=colcount*(i-1)+3,j2=colcount*(i-1)+6)
}
ft<- ft %>% align(align="center",part="all") %>%
hline_top(part="header",border=fp_border(color="white",width=0))
ft
for(i in 1:count){
ft <- ft %>% hline_top(j=((i-1)*colcount+2):(i*colcount),
part="header",border=fp_border(color="black",width=1))
}
big_border=fp_border(color="black",width=2)
hlabel=c("","",modelNames[1],rep("",3))
if(count>1){
for(i in 2:count){
if(vanilla) {hlabel=c(hlabel,"","",modelNames[i],rep("",3))}
else {hlabel=c(hlabel,"",modelNames[i],rep("",3))}
}
}
hlabel<-setNames(hlabel,col_keys)
hlabel=as.list(hlabel)
hlabel
length(hlabel)
length(col_keys)
count
colcount
ft
ft <- add_header_row(ft,values=hlabel,top=TRUE,
colwidths=rep(1,count*colcount+ifelse(vanilla,0,1)))
ft <- ft %>%
hline_top(j=2:(count*colcount++ifelse(vanilla,0,1)),part="header",border=fp_border(color="black",width=1))
ft
for(i in 1:count){
ft<-ft %>% hline(i=1,j=((i-1)*colcount+3):((i-1)*colcount+6),
part="header",border=fp_border(color="black",width=1))
}
for(i in 1:count){
ft <- ft %>% merge_h_range (i=1,j1=(i-1)*colcount+3,j2=(i-1)*colcount+6,
part="header")
}
ft
hlabel=list(name1="",coef1="Consequent")
ft<-ft %>%
add_header_row(top=TRUE,values=hlabel,
colwidths=c(1,count*colcount+ifelse(vanilla,0,1)-1)) %>%
hline_top(part="header",border=big_border) %>%
hline(i=1,j=2:(count*colcount+ifelse(vanilla,0,1)),part="header",
border=fp_border(color="black",width=1)) %>%
merge_h_range(i=1,j1=2,j2=count*colcount+ifelse(vanilla,0,1),part="header") %>%
align(align="center",part="header") %>%
align(align="right",part="body") %>%
bold(part="header") %>%
align(i=(nrow(x)-4):nrow(x),align="center",part="body") %>%
fontsize(part="all",size=12) %>%
hline(i=rowcount-5,border=fp_border(color="gray"),part="body")
ft
if(count>1){
if(vanilla) {
for(i in 1:(count-1)){
ft<-ft %>% width(j=i*6+1,width=0.001)
}
for(i in 1:count){
ft<-ft %>%  width(j=(i-1)*6+2,width=0.4)
}
} else{
for(i in 1:count){
ft<-ft %>% width(j=(i-1)*5+2,width=0.4)
}
}
for(i in 1:(count)){
ft<-ft %>% italic(i=3,j=c(((i-1)*colcount+3):((i-1)*colcount+5)),
italic=TRUE,part="header")
}
} else{
ft<-ft %>% width(j=2,width=0.4)
}
ft
if(!vanilla){
ft <-ft %>%
theme_zebra(even_body="#EFEFEF",odd_body="transparent",
even_header ="#5B7778",odd_header="#5B7778") %>%
fontsize(size=12,part="all") %>%
align(align="center",part="header") %>%
align(j=1,align="center",part="body") %>%
align(j=2:(1+colcount*count),align="right",part="body") %>%
align(i=(nrow(x)-4):nrow(x),align="center",part="body") %>%
color(color="white",part="header") %>%
hline(j=2:(1+colcount*count),border=fp_border(color="black",width=1),
part="header") %>%
vline(j=1:(1+colcount*count),border=fp_border(color="black",width=1),
part="header") %>%
vline_left(border=fp_border(color="black",width=1),
part="header") %>%
hline(j=1:(1+colcount*count),border=fp_border(color="#EDBD3E",width=1),
part="body") %>%
vline(j=1:(1+colcount*count),border=fp_border(color="#EDBD3E",width=1),
part="body") %>%
vline_left(border=fp_border(color="#EDBD3E",width=1),
part="body")
}
ft
count=ncol(x)/5
label=paste0("label",1:count)
ft<-ft %>% numberSubscript(label=label) %>%
align(align="center",j=label,part="body")
ft<-ft %>% width(j=1,width=0.3)  %>%
align(align="center",j=1,part="body")
if(vanilla) {
ft<- ft %>% width(j=2:((count-1)*6+2),width=0.9)
if(count>1) {
for(i in 1:(count-1)){
ft<-ft %>% width(j=i*6+1,width=0.001)
}
}
}
ft
}
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
library(processR)
x=modelsSummary(fit1,labels=labels)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
ft<-modelsSummaryTable(x)
ft
ft %>% width(j=2,width=0.01)
ft
ft %>% width(j=3,width=0.01)
ft
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
library(processR)
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
library(processR)
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels)
ft<-modelsSummaryTable(list(fit1,fit2),labels=labels)
ft
ft %>% width(j=7,width=0.01)
ft %>% width(j=7,width=0.001)
ft %>% width(j=8,width=0.001)
ft
ft %>% width(j=7,width=0.001)
ft %>% width(j=8,width=0.001)
ft %>% width(j=7:8,width=0.001)
ft
ft %>% width(j=7,width=0.001)
ft %>% width(j=7:8,width=0.001)
ft
ft %>% width(j=8:9,width=0.001)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp*am,data=mtcars)
fit=list(fit1,fit2)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
modelsSummary(fit,labels=labels)
ft=modelsSummaryTable(x)
ft
library(processR)
ft=modelsSummaryTable(x)
ft
ft
compose(ft,j=2,
value=as_paragraph(
pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(",label[i],",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label[i],",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
value=as_paragraph(
as_chunk(pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(",label[i],",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label[i],",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
compose(ft,j=2,
value=as_paragraph(
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(",label[i],",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label[i],",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
compose(ft,j=2,
value=as_paragraph(
as_chunk('label1',pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(",label[i],",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label[i],",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
ft
compose(ft,j=2,
value=as_paragraph(
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(",label1,",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label1,",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
compose(ft,j=2,
value=as_paragraph(
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,[^0-9yYmM]*),
a~ stringr::str_extract(label1,[0-9yYmM].*)),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,[^0-9yYmM]*),
a~ stringr::str_extract(label1,[0-9yYmM].*)),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,[^0-9yYmM]*),
a~ stringr::str_extract(label1,[0-9yYmM].*)),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
myft <- flextable( head(iris, n = 10 ))
myft
myft <- compose( myft, j = 1,
value = as_paragraph(
minibar(value = Sepal.Length, max = max(Sepal.Length)),
" ",
as_chunk( Sepal.Length, formater = formatC,
props = fp_text(color = "orange") ),
" blah blah"
),
part = "body")
autofit(myft)
myft <- flextable( head(iris, n = 10 ))
myft
myft <- compose( myft, j = 1,
value = as_paragraph(
minibar(value = Sepal.Length, max = max(Sepal.Length)),
" ",
as_chunk( Sepal.Length, formater = formatC,
props = fp_text(color = "orange") ),
" blah blah"
),
part = "body")
autofit(myft)
ft
x
str(x)
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
props = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,
formatters = list(pattern = '{{A}}{{a}}',
A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
props = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft <- compose(ft, i = 1, j = "dummy", part = "header",
value = as_paragraph(
as_sub("Sepal.Length"),
" anything "
) )
autofit(ft)
ft <- flextable( head(iris), col_keys = c("dummy") )
ft <- compose(ft, i = 1, j = "dummy", part = "header",
value = as_paragraph(
as_sub("Sepal.Length"),
" anything "
) )
autofit(ft)
ft <- flextable( head(iris), col_keys = c("dummy") )
ft
ft <- flextable( head(iris), col_keys = c("dummy") )
ft
ft <- compose(ft, i = 1, j = "dummy", part = "header",
value = as_paragraph(
as_sub("Sepal.Length"),
" anything "
) )
autofit(ft)
ft
fit1=lm(mpg~wt,data=mtcars)
x=modelsSummary(fit1,labels=labels)
ft=modelsSummaryTable(x)
ft
ft <- flextable( head(iris),
col_keys = c("Species", "Sepal", "Petal") )
ft <- set_header_labels(ft, Sepal="Sepal", Petal="Petal")
ft <- compose(ft, j = "Sepal",
value = as_paragraph( as_bracket(Sepal.Length, Sepal.Width) ) )
ft <- compose(ft, j = "Petal",
value = as_paragraph( as_bracket(Petal.Length, Petal.Width) ) )
autofit(ft)
fit1=lm(mpg~wt,data=mtcars)
x=modelsSummary(fit1,labels=labels)
ft=modelsSummaryTable(x)
ft
ft
compose(ft,j=2,
value=as_paragraph(
as_i(stringr::str_extract(label1,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label1,'[0-9yYmM].*')))),
part='body')
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
x=modelsSummary(list(fit1,fit2),labels=labels)
ft=modelsSummaryTable(x)
ft
compose(ft,j=2,
value=as_paragraph(
as_i(stringr::str_extract(label1,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label1,'[0-9yYmM].*')))),
part='body')
compose(ft,j=8,
value=as_paragraph(
as_i(stringr::str_extract(label2,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label2,'[0-9yYmM].*')))),
part='body')
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
ft=modelsSummaryTable(x)
ft
compose(ft,j=2,
value=as_paragraph(
as_i(stringr::str_extract(label1,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label1,'[0-9yYmM].*')))),
part='body')
compose(ft,j=8,
value=as_paragraph(
as_i(stringr::str_extract(label2,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label2,'[0-9yYmM].*')))),
part='body')
compose(ft,j=14,
value=as_paragraph(
as_i(stringr::str_extract(label3,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label3,'[0-9yYmM].*')))),
part='body')
devtools::docuemnt()
devtools::document()
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp*am,data=mtcars)
fit=list(fit1,fit2)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
modelsSummary(fit,labels=labels)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
devtools::document()
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
library(processR)
modelsSummaryTable(x)
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
library(processR)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
devtools::document()
devtools::check()
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
devtools::document()
devtools::check()
